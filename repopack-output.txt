This file is a merged representation of the entire codebase, combining all repository files into a single document.
Generated by Repopack on: 2024-10-07T15:50:17.306Z

================================================================
File Summary
================================================================

Purpose:
--------
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.

File Format:
------------
The content is organized as follows:
1. This summary section
2. Repository information
3. Repository structure
4. Multiple file entries, each consisting of:
  a. A separator line (================)
  b. The file path (File: path/to/file)
  c. Another separator line
  d. The full contents of the file
  e. A blank line

Usage Guidelines:
-----------------
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.

Notes:
------
- Some files may have been excluded based on .gitignore rules and Repopack's
  configuration.
- Binary files are not included in this packed representation. Please refer to
  the Repository Structure section for a complete list of file paths, including
  binary files.

Additional Info:
----------------

For more information about Repopack, visit: https://github.com/yamadashy/repopack

================================================================
Repository Structure
================================================================
.eslintrc.json
.gitignore
.prettierrc
components/CoinbaseButton.tsx
components/CoinList.tsx
components/CoinRow.tsx
components/Header.tsx
components/MemecoinsRebalancer.tsx
components/SelectionInterface.tsx
components/TransactionStatus.tsx
components/WalletInfo.tsx
config/wagmi.ts
global.d.ts
next.config.mjs
package.json
pages/_app.tsx
pages/_document.tsx
pages/api/hello.ts
pages/index.tsx
postcss.config.js
postcss.config.mjs
public/ethereum.svg
public/logo.svg
README.md
styles/globals.css
tailwind.config.js
tailwind.config.ts
tsconfig.json

================================================================
Repository Files
================================================================

================
File: .eslintrc.json
================
{
  "extends": ["next/core-web-vitals", "next/typescript", "prettier"],
  "rules": {
    "react/no-unescaped-entities": "off",
    "@next/next/no-page-custom-font": "off"
  }
}

================
File: .gitignore
================
# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
/node_modules
/.pnp
.pnp.js
.yarn/install-state.gz

# testing
/coverage

# next.js
/.next/
/out/

# production
/build

# misc
.DS_Store
*.pem

# debug
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# local env files
.env*.local

# vercel
.vercel

# typescript
*.tsbuildinfo
next-env.d.ts
.env

================
File: .prettierrc
================
{
  "semi": true,
  "trailingComma": "es5",
  "singleQuote": true,
  "printWidth": 100,
  "tabWidth": 2,
  "useTabs": false
}

================
File: components/CoinbaseButton.tsx
================
import React from "react";
import { useAccount, useConnect, useDisconnect } from "wagmi";

const buttonStyles = {
    background: "transparent",
    border: "1px solid transparent",
    display: "flex",
    alignItems: "center",
    justifyContent: "space-between",
    fontFamily: "Arial, sans-serif",
    fontWeight: "bold",
    fontSize: 16,
    backgroundColor: "#0052FF",
    padding: "8px 20px 8px 14px",
    borderRadius: 10,
    color: "white",
    cursor: "pointer",
};

export default function CoinbaseButton() {
    const { connect, connectors } = useConnect();
    const { isConnected } = useAccount();
    const { disconnect } = useDisconnect();

    function connectToSmartWallet() {
        console.log("H:", connectors)
        const coinbaseWalletConnector = connectors.find(
            (connector) => connector.id === "coinbaseWalletSDK"
        );
        console.log(coinbaseWalletConnector)

        if (coinbaseWalletConnector) {
            connect({ connector: coinbaseWalletConnector });
        }
        console.log("H2")
    }

    if (isConnected)
        return (
            <button style={buttonStyles} onClick={() => disconnect()}>
                <span>Disconnect</span>
            </button>
        );

    return (
        <button style={buttonStyles} onClick={connectToSmartWallet}>
            <span>Connect Wallet</span>
        </button>
    );
}

================
File: components/CoinList.tsx
================
import React from 'react';
import CoinRow from './CoinRow';

interface Coin {
  id: string;
  symbol: string;
  name: string;
  image: string;
  current_price: number;
  price_change_percentage_24h: number | null;
  price_change_percentage_7d_in_currency: number | null;
  market_cap: number;
  total_volume: number;
  ath: number;
}

interface CoinListProps {
  coins: Coin[];
  selectedCoins: string[];
  onSelect: (id: string) => void;
}

const CoinList: React.FC<CoinListProps> = ({ coins, selectedCoins, onSelect }) => {
  return (
    <div className="overflow-x-auto bg-light-blue rounded-lg shadow-lg">
      <table className="w-full text-left">
        <thead>
          <tr className="bg-dark-blue">
            <th className="p-4 text-gray-300">Token</th>
            <th className="p-4 text-gray-300">Price</th>
            <th className="p-4 text-gray-300">24h</th>
            <th className="p-4 text-gray-300">7d</th>
            <th className="p-4 text-gray-300">Market Cap</th>
            <th className="p-4 text-gray-300">Volume</th>
            <th className="p-4 text-gray-300">ATH</th>
            <th className="p-4 text-gray-300">Action</th>
          </tr>
        </thead>
        <tbody>
          {coins.map((coin) => (
            <CoinRow 
              key={coin.id} 
              coin={coin} 
              isSelected={selectedCoins.includes(coin.id)}
              onSelect={onSelect}
            />
          ))}
        </tbody>
      </table>
    </div>
  );
};

export default CoinList;

================
File: components/CoinRow.tsx
================
import React from 'react';

interface CoinRowProps {
  coin: {
    id: string;
    symbol: string;
    name: string;
    image: string;
    current_price: number;
    price_change_percentage_24h: number | null;
    price_change_percentage_7d_in_currency: number | null;
    market_cap: number;
    total_volume: number;
    ath: number;
  };
  isSelected: boolean;
  onSelect: (id: string) => void;
}

const CoinRow: React.FC<CoinRowProps> = ({ coin, isSelected, onSelect }) => {
  const formatPercentage = (value: number | null | undefined) => {
    if (value === null || value === undefined) return 'N/A';
    return `${value.toFixed(2)}%`;
  };

  const getPercentageColor = (value: number | null | undefined) => {
    if (value === null || value === undefined) return 'text-gray-400';
    return value > 0 ? 'text-green-500' : 'text-red-500';
  };

  return (
    <tr className="border-b border-gray-700 hover:bg-light-blue transition duration-300">
      <td className="p-4 flex items-center">
        <img src={coin.image} alt={coin.name} className="w-10 h-10 mr-3 rounded-full" />
        <div>
          <span className="font-bold text-white">{coin.symbol.toUpperCase()}</span>
          <span className="text-gray-400 text-sm block">{coin.name}</span>
        </div>
      </td>
      <td className="p-4 text-white">${coin.current_price.toFixed(6)}</td>
      <td className={`p-4 ${getPercentageColor(coin.price_change_percentage_24h)}`}>
        {formatPercentage(coin.price_change_percentage_24h)}
      </td>
      <td className={`p-4 ${getPercentageColor(coin.price_change_percentage_7d_in_currency)}`}>
        {formatPercentage(coin.price_change_percentage_7d_in_currency)}
      </td>
      <td className="p-4 text-white">${coin.market_cap.toLocaleString()}</td>
      <td className="p-4 text-white">${coin.total_volume.toLocaleString()}</td>
      <td className="p-4 text-white">${coin.ath.toFixed(6)}</td>
      <td className="p-4">
        <button
          onClick={() => onSelect(coin.id)}
          className={`${
            isSelected ? 'bg-accent-green' : 'bg-gray-600'
          } hover:bg-green-600 text-white font-bold py-2 px-4 rounded transition duration-300`}
        >
          {isSelected ? 'âœ“ Selected' : 'Select'}
        </button>
      </td>
    </tr>
  );
};

export default CoinRow;

================
File: components/Header.tsx
================
import React from 'react';
import CoinbaseButton from './CoinbaseButton';

const Header: React.FC = () => {
  return (
    <header className="bg-dark-blue p-4">
      <div className="container mx-auto flex justify-between items-center">
        <div className="flex items-center">
          <img src="/logo.svg" alt="DefiLens" className="h-8 w-8 mr-2" />
          <h1 className="text-2xl font-bold text-white">DefiLens</h1>
        </div>
        <nav className="hidden md:block">
          <ul className="flex space-x-6 text-gray-300">
            <li className="hover:text-white cursor-pointer">Rebalance Your Memes in GasLess</li>
            {/* <li className="hover:text-white cursor-pointer">Automate Mem</li> */}
          </ul>
        </nav>
        <CoinbaseButton />
      </div>
    </header>
  );
};

export default Header;

================
File: components/MemecoinsRebalancer.tsx
================
import React, { useState, useEffect } from 'react';
import { useAccount } from 'wagmi';
import { useSendCalls, useCallsStatus } from 'wagmi/experimental';
import { parseUnits, encodeFunctionData } from 'viem';
import { toast } from 'react-toastify';
import { FiRefreshCw, FiTrash2 } from 'react-icons/fi';
import TransactionStatus from './TransactionStatus';
import Link from 'next/link';

interface CoinDetails {
    id: string;
    name: string;
    symbol: string;
    contract_address: string;
    decimal_place: number;
    image: string;
}

const UNISWAP_ROUTER_ADDRESS = "0x3fC91A3afd70395Cd496C647d5a6CC9D4B2b7FAD";
const USDC_ADDRESS = "0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913";

const MemecoinsRebalancer: React.FC = () => {
    const [allCoins, setAllCoins] = useState<CoinDetails[]>([]);
    const [selectedCoins, setSelectedCoins] = useState<CoinDetails[]>([]);
    const [amount, setAmount] = useState('');
    const [percentages, setPercentages] = useState<{ [key: string]: string }>({});
    const [error, setError] = useState('');
    const [isLoading, setIsLoading] = useState(false);
    const [swapData, setSwapData] = useState<any>(null);
    const [buttonState, setButtonState] = useState<'proceed' | 'quoting' | 'rebalance' | 'rebalancing'>('proceed');
    const [searchTerm, setSearchTerm] = useState('');

    const { address } = useAccount();
    const { sendCallsAsync, data: callsId, status: sendCallsStatus, error: sendCallsError } = useSendCalls();
    const { data: callsStatus } = useCallsStatus({
        id: callsId as string,
        query: {
            enabled: !!callsId,
            refetchInterval: (data) =>
                data.state.data?.status === "CONFIRMED" ? false : 1000,
        },
    });

    useEffect(() => {
        const fetchCoins = async () => {
            try {
                const response = await fetch('https://api.coingecko.com/api/v3/coins/markets?vs_currency=usd&category=base-meme-coins&order=volume_desc&price_change_percentage=24h%2C7d');
                const data = await response.json();
                setAllCoins(data.map((coin: any) => ({
                    id: coin.id,
                    name: coin.name,
                    symbol: coin.symbol,
                    image: coin.image,
                    contract_address: '',
                    decimal_place: 0
                })));
            } catch (error) {
                console.error('Error fetching coin data:', error);
                toast.error('Failed to fetch memecoin list');
            }
        };

        fetchCoins();
    }, []);

    useEffect(() => {
        if (selectedCoins.length > 0) {
            const equalPercentage = (100 / selectedCoins.length).toFixed(2);
            const initialPercentages = Object.fromEntries(
                selectedCoins.map(coin => [coin.id, equalPercentage])
            );
            setPercentages(initialPercentages);
        } else {
            setPercentages({});
        }
        
        if (swapData) {
            setButtonState('proceed');
            setSwapData(null);
        }
    }, [selectedCoins]);

    const handleCoinSelect = async (coin: CoinDetails) => {
        if (selectedCoins.find(c => c.id === coin.id)) {
            setSelectedCoins(selectedCoins.filter(c => c.id !== coin.id));
        } else {
            try {
                const response = await fetch(`https://api.coingecko.com/api/v3/coins/${coin.id}`);
                const data = await response.json();
                const updatedCoin: CoinDetails = {
                    ...coin,
                    contract_address: data.detail_platforms.base?.contract_address || '',
                    decimal_place: data.detail_platforms.base?.decimal_place || 18
                };
                setSelectedCoins([...selectedCoins, updatedCoin]);
            } catch (error) {
                console.error('Error fetching coin details:', error);
                toast.error(`Failed to fetch details for ${coin.symbol}`);
            }
        }
    };

    const handlePercentageChange = (id: string, value: string) => {
        setPercentages(prev => ({
            ...prev,
            [id]: value
        }));
        setButtonState('proceed');
        setSwapData(null);
    };

    const handleProceed = async () => {
        if (!amount || isNaN(Number(amount)) || Number(amount) <= 0) {
            setError('Please enter a valid amount');
            return;
        }

        setError('');
        setIsLoading(true);
        setButtonState('quoting');

        try {
            const swapRequests = selectedCoins.map(coin => ({
                tokenIn: USDC_ADDRESS,
                tokenOut: coin.contract_address,
                amountIn: Math.floor(Number(amount) * 1e6 * Number(percentages[coin.id]) / 100).toString(),
                recipient: address
            }));

            const response = await fetch('http://localhost:3002/api/generate-swap-data', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(swapRequests),
            });

            if (!response.ok) {
                throw new Error('Failed to generate swap data');
            }

            const data = await response.json();
            setSwapData(data);
            setButtonState('rebalance');
        } catch (error: any) {
            console.error('Error during swap data generation:', error);
            setError(`Failed to generate swap data: ${error.message}`);
            setButtonState('proceed');
        } finally {
            setIsLoading(false);
        }
    };

    const handleRebalance = async () => {
        if (!swapData) {
            setError('Swap data not available');
            return;
        }

        setIsLoading(true);
        setButtonState('rebalancing');

        try {
            const totalAmount = parseUnits(amount, 6); // Assuming USDC has 6 decimals
            const approvalData = encodeFunctionData({
                abi: [{"inputs":[{"internalType":"address","name":"spender","type":"address"},{"internalType":"uint256","name":"amount","type":"uint256"}],"name":"approve","outputs":[{"internalType":"bool","name":"","type":"bool"}],"stateMutability":"nonpayable","type":"function"}],
                functionName: 'approve',
                args: [swapData[0].to, totalAmount]
            });

            const calls = [
                {
                    to: USDC_ADDRESS,
                    data: approvalData,
                    value: BigInt(0)
                },
                ...swapData.map((data: any) => ({
                    to: data.to,
                    data: data.calldata,
                    value: BigInt(data.value || 0)
                }))
            ];

            const callsId = await sendCallsAsync({ 
                calls,
                capabilities: {
                    paymasterService: {
                        // Paymaster Proxy Node url goes here.
                        url: "https://api.developer.coinbase.com/rpc/v1/base/uvzNrW_9bgIu5967om0LMojj4bS6YbTR",
                    },
                },
            });
        } catch (error: any) {
            console.error('Error during rebalance:', error);
            setError(`Failed to execute rebalance: ${error.message}`);
            toast.error("Rebalance failed. Please try again.");
            setButtonState('rebalance');
        } finally {
            setIsLoading(false);
        }
    };

    const resetState = () => {
        setSelectedCoins([]);
        setPercentages({});
        setAmount('');
        setSwapData(null);
        setButtonState('proceed');
    };

    const filteredCoins = allCoins.filter(coin => 
        coin.name.toLowerCase().includes(searchTerm.toLowerCase()) ||
        coin.symbol.toLowerCase().includes(searchTerm.toLowerCase())
    );

    useEffect(() => {
        if (callsStatus?.status === 'CONFIRMED' && callsStatus.receipts && callsStatus.receipts.length > 0) {
            const txHash = callsStatus.receipts[0].transactionHash;
            toast.success(`Transaction successful! Hash: ${txHash}`);
            resetState();
        }
    }, [callsStatus]);

    return (
        <div className="flex flex-wrap -mx-2">
            <div className="w-full lg:w-3/5 px-2 mb-4 lg:mb-0">
                <input
                    type="text"
                    placeholder="Search memecoins..."
                    value={searchTerm}
                    onChange={(e) => setSearchTerm(e.target.value)}
                    className="w-full p-2 mb-4 bg-gray-700 text-white rounded"
                />
                <div className="grid grid-cols-2 md:grid-cols-3 gap-4">
                    {filteredCoins.map(coin => (
                        <div 
                            key={coin.id} 
                            className={`p-4 rounded cursor-pointer ${selectedCoins.find(c => c.id === coin.id) ? 'bg-accent-green' : 'bg-light-blue'}`}
                            onClick={() => handleCoinSelect(coin)}
                        >
                            <img src={coin.image} alt={coin.name} className="w-8 h-8 mb-2" />
                            <p className="font-bold">{coin.symbol}</p>
                            <p className="text-sm">{coin.name}</p>
                        </div>
                    ))}
                </div>
            </div>
            <div className="w-full lg:w-2/5 px-2">
                <h2 className="text-xl font-bold mb-4">Rebalance Portfolio</h2>
                <input
                    type="number"
                    value={amount}
                    onChange={(e) => setAmount(e.target.value)}
                    placeholder="Enter USDC amount"
                    className="w-full p-2 mb-4 bg-gray-700 text-white rounded"
                />
                {selectedCoins.map(coin => (
                    <div key={coin.id} className="flex items-center mb-2">
                        <img src={coin.image} alt={coin.symbol} className="w-6 h-6 mr-2" />
                        <span className="w-24 truncate">{coin.symbol}:</span>
                        <input
                            type="number"
                            value={percentages[coin.id] || ''}
                            onChange={(e) => handlePercentageChange(coin.id, e.target.value)}
                            className="w-20 p-1 bg-gray-700 text-white rounded"
                            min="0"
                            max="100"
                            step="0.01"
                        />
                        <span className="ml-2">%</span>
                        <button 
                            onClick={() => handleCoinSelect(coin)}
                            className="ml-2 text-red-500"
                        >
                            Remove
                        </button>
                    </div>
                ))}
                {error && <div className="text-red-500 mt-4">{error}</div>}
                <div className="flex justify-between items-center mt-4">
                    <button
                        onClick={buttonState === 'proceed' ? handleProceed : 
                                 buttonState === 'rebalance' ? handleRebalance : 
                                 undefined}
                        className={`bg-accent-green hover:bg-green-600 text-white font-bold py-2 px-4 rounded ${selectedCoins.length === 0 ? 'opacity-50 cursor-not-allowed' : ''}`}
                        disabled={isLoading || buttonState === 'quoting' || buttonState === 'rebalancing' || selectedCoins.length === 0}
                    >
                        {buttonState === 'proceed' && 'Proceed'}
                        {buttonState === 'quoting' && 'Wait for Quote...'}
                        {buttonState === 'rebalance' && 'Rebalance'}
                        {buttonState === 'rebalancing' && 'Rebalancing...'}
                    </button>
                    {buttonState === 'rebalance' && (
                        <button
                            onClick={handleProceed}
                            className="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded ml-2"
                        >
                            <FiRefreshCw />
                        </button>
                    )}
                    <button
                        onClick={resetState}
                        className="bg-red-500 hover:bg-red-600 text-white font-bold py-2 px-4 rounded ml-2"
                    >
                        <FiTrash2 />
                    </button>
                </div>
                {sendCallsStatus != "idle" && <div>Rebalance Status: {sendCallsStatus}</div>}
                {sendCallsError && <div className="text-red-500 mt-4">{sendCallsError.message}</div>}
                <TransactionStatus callStatus={callsStatus} />
            </div>
        </div>
    );
};

export default MemecoinsRebalancer;

================
File: components/SelectionInterface.tsx
================
import React from 'react';

interface SelectionInterfaceProps {
  selectedCount: number;
  onRebalance: () => void;
}

const SelectionInterface: React.FC<SelectionInterfaceProps> = ({ selectedCount, onRebalance }) => {
  return (
    <div className="bg-light-blue p-4 rounded-lg mb-6 flex justify-between items-center">
      <div>
        <span className="text-white font-bold">Selected: {selectedCount}</span>
      </div>
      {selectedCount > 0 && (
        <button
          onClick={onRebalance}
          className="bg-accent-green hover:bg-green-600 text-white font-bold py-2 px-4 rounded transition duration-300"
        >
          Rebalance
        </button>
      )}
    </div>
  );
};

export default SelectionInterface;

================
File: components/TransactionStatus.tsx
================
import Link from "next/link";
import { WalletCallReceipt } from "viem";

export default function TransactionStatus({
    callStatus,
}: {
    callStatus:
        | {
              status: "PENDING" | "CONFIRMED";
              receipts?:
                  | WalletCallReceipt<bigint, "success" | "reverted">[]
                  | undefined;
          }
        | undefined;
}) {
    if (!callStatus) return null;

    if (callStatus.status === "PENDING")
        return <div>Batch Status: {callStatus.status}</div>;

    if (callStatus.receipts) {
        let receipt = callStatus.receipts[0];
        let { transactionHash } = receipt;
        console.log(receipt);

        return (
            <div>
                <div>
                    Transaction Hash:{" "}
                    <a
                        target="_blank"
                        href={`https://basescan.org/tx/${transactionHash}`}
                    >
                        {transactionHash}
                    </a>
                </div>
            </div>
        );
    }
}

================
File: components/WalletInfo.tsx
================
import React, { useState } from 'react';
import { useAccount, useBalance } from 'wagmi';
import { FiCopy, FiExternalLink } from 'react-icons/fi';
import { toast } from 'react-toastify';
import Image from 'next/image';

const WalletInfo: React.FC = () => {
    const [showDepositModal, setShowDepositModal] = useState(false);
    const { address } = useAccount();
    const { data: ethBalance } = useBalance({ address });
    const { data: usdcBalance } = useBalance({
        address,
        token: '0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913', // USDC address on Base
    });

    const copyToClipboard = (text: string) => {
        navigator.clipboard.writeText(text);
        toast.success('Address copied to clipboard!');
    };

    const formatAddress = (addr: string) => `${addr.slice(0, 6)}...${addr.slice(-4)}`;

    return (
        <div className="bg-gray-800 p-6 rounded-lg shadow-lg">
            <div className="flex justify-between items-center mb-4">
                <h2 className="text-2xl font-bold text-white">Wallet Info</h2>
                <button
                    onClick={() => setShowDepositModal(true)}
                    className="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded"
                >
                    Deposit
                </button>
            </div>
            <div className="flex justify-between items-center mb-4">
                <div className="flex items-center">
                    <Image src="/ethereum.svg" alt="ETH" width={24} height={24} className="mr-2" />
                    <span className="text-white">ETH Balance:</span>
                </div>
                <span className="text-white font-bold">{ethBalance?.formatted || '0'} ETH</span>
            </div>
            <div className="flex justify-between items-center mb-4">
                <div className="flex items-center">
                    <Image src="/usdc.png" alt="USDC" width={24} height={24} className="mr-2" />
                    <span className="text-white">USDC Balance:</span>
                </div>
                <span className="text-white font-bold">{usdcBalance?.formatted || '0'} USDC</span>
            </div>
            <div className="text-sm text-gray-400">
                Smart Account: {address ? formatAddress(address) : 'Not connected'}
            </div>

            {showDepositModal && (
                <div className="fixed inset-0 bg-black bg-opacity-50 flex justify-center items-center">
                    <div className="bg-gray-800 p-6 rounded-lg max-w-md w-full">
                        <h3 className="text-xl font-bold mb-4 text-white">Deposit USDC</h3>
                        <p className="mb-4 text-gray-300">
                            Please send USDC to the following address:
                        </p>
                        <div className="bg-gray-700 p-3 rounded mb-4 flex justify-between items-center">
                            <span className="text-white font-mono">{address}</span>
                            <div>
                                <button
                                    onClick={() => address && copyToClipboard(address)}
                                    className="text-blue-400 hover:text-blue-300 mr-2"
                                >
                                    <FiCopy size={20} />
                                </button>
                                <a
                                    href={`https://basescan.org/address/${address}`}
                                    target="_blank"
                                    rel="noopener noreferrer"
                                    className="text-blue-400 hover:text-blue-300"
                                >
                                    <FiExternalLink size={20} />
                                </a>
                            </div>
                        </div>
                        <p className="text-sm text-yellow-400 mb-4">
                            Note: Please ensure you are sending USDC on the Base network.
                            USDC Contract: 0x833589fCD6eDb6E08f4c7C32D4f71b54bdA02913
                        </p>
                        <button
                            onClick={() => setShowDepositModal(false)}
                            className="bg-blue-500 hover:bg-blue-600 text-white font-bold py-2 px-4 rounded w-full"
                        >
                            Close
                        </button>
                    </div>
                </div>
            )}
        </div>
    );
};

export default WalletInfo;

================
File: config/wagmi.ts
================
import { http, createConfig } from "wagmi";
import { base, baseSepolia } from "wagmi/chains";
import { coinbaseWallet } from "wagmi/connectors";

export const config = createConfig({
    chains: [base],
    connectors: [
        coinbaseWallet({
            appName: "Memecoin Dashboard",
            preference: "smartWalletOnly",
        }),
    ],
    ssr: true,
    transports: {
        [base.id]: http(),
    },
});

declare module "wagmi" {
    interface Register {
        config: typeof config;
    }
}

================
File: global.d.ts
================
import { Buffer } from 'buffer';

declare global {
  interface Window {
    Buffer: typeof Buffer;
  }
}

================
File: next.config.mjs
================
import { createRequire } from 'module';
const require = createRequire(import.meta.url);

import withTM from 'next-transpile-modules';

const withTranspile = withTM(['@uniswap/smart-order-router']);

/** @type {import('next').NextConfig} */
const nextConfig = {
  reactStrictMode: true,
  swcMinify: true,
  webpack: (config, { isServer }) => {
    if (!isServer) {
      config.resolve.fallback = {
        ...config.resolve.fallback,
        fs: false,
        net: false,
        tls: false,
        crypto: require.resolve('crypto-browserify'),
        stream: require.resolve('stream-browserify'),
        url: require.resolve('url/'),
        zlib: require.resolve('browserify-zlib'),
        https: require.resolve('https-browserify'),
        http: require.resolve('stream-http'),
      };
    }
    return config;
  },
};

export default withTranspile(nextConfig);

================
File: package.json
================
{
  "name": "memecoin-rebalancer",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "lint": "next lint"
  },
  "dependencies": {
    "@tanstack/react-query": "^5.59.0",
    "@uniswap/sdk-core": "^5.8.1",
    "@uniswap/smart-order-router": "^4.5.2",
    "axios": "^1.7.7",
    "browserify-zlib": "^0.2.0",
    "crypto-browserify": "^3.12.0",
    "ethers": "^5.7.2",
    "https-browserify": "^1.0.0",
    "next": "^12.3.4",
    "next-transpile-modules": "^10.0.1",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-icons": "^5.3.0",
    "react-toastify": "^10.0.5",
    "stream-browserify": "^3.0.0",
    "stream-http": "^3.2.0",
    "url": "^0.11.4",
    "viem": "^2.21.18",
    "wagmi": "^2.12.17"
  },
  "devDependencies": {
    "@types/node": "^18.15.11",
    "@types/react": "^18.0.33",
    "@types/react-dom": "^18.0.11",
    "@wagmi/cli": "^2.1.16",
    "autoprefixer": "^10.4.20",
    "eslint": "^8.37.0",
    "eslint-config-next": "^13.3.0",
    "postcss": "^8.4.47",
    "prettier": "^2.8.7",
    "tailwindcss": "^3.4.13",
    "typescript": "^5.0.3"
  }
}

================
File: pages/_app.tsx
================
import '../styles/globals.css';
import type { AppProps } from 'next/app';
import { WagmiConfig } from 'wagmi';
import { QueryClient, QueryClientProvider } from '@tanstack/react-query';
import { config } from '../config/wagmi';
import { Buffer } from 'buffer';

if (typeof window !== 'undefined') {
  window.Buffer = Buffer;
}

const queryClient = new QueryClient();

function MyApp({ Component, pageProps }: AppProps) {
  return (
    <WagmiConfig config={config}>
      <QueryClientProvider client={queryClient}>
        <Component {...pageProps} />
      </QueryClientProvider>
    </WagmiConfig>
  );
}

export default MyApp;

================
File: pages/_document.tsx
================
import { Html, Head, Main, NextScript } from "next/document";

export default function Document() {
  return (
    <Html lang="en">
      <Head />
      <body className="antialiased">
        <Main />
        <NextScript />
      </body>
    </Html>
  );
}

================
File: pages/api/hello.ts
================
// Next.js API route support: https://nextjs.org/docs/api-routes/introduction
import type { NextApiRequest, NextApiResponse } from "next";

type Data = {
  name: string;
};

export default function handler(
  req: NextApiRequest,
  res: NextApiResponse<Data>,
) {
  res.status(200).json({ name: "John Doe" });
}

================
File: pages/index.tsx
================
import { useAccount } from "wagmi";
import Head from 'next/head';
import Header from "../components/Header";
import WalletInfo from "../components/WalletInfo";
import MemecoinsRebalancer from "../components/MemecoinsRebalancer";
import { ToastContainer } from 'react-toastify';
import 'react-toastify/dist/ReactToastify.css';

export default function Home() {
  const { isConnected } = useAccount();

  return (
    <div className="min-h-screen bg-dark-blue">
      <Head>
        <title>DefiLens - Memecoin Dashboard</title>
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <Header />
      <main className="container mx-auto px-4 py-8">
        {isConnected && <WalletInfo />}
        <h2 className="text-2xl font-bold text-white mb-6">Memecoin Rebalancer</h2>
        <MemecoinsRebalancer />
      </main>
      <ToastContainer />
    </div>
  );
}

================
File: postcss.config.js
================
module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}

================
File: postcss.config.mjs
================
/** @type {import('postcss-load-config').Config} */
const config = {
  plugins: {
    tailwindcss: {},
  },
};

export default config;

================
File: public/ethereum.svg
================
<svg width="32" height="32" viewBox="0 0 32 32" fill="none" xmlns="http://www.w3.org/2000/svg">
<rect width="32" height="32" fill="#E1E7FF"/>
<path d="M21.9999 15.6768L16.0098 6V12.9944L21.9999 15.6768Z" fill="#62688F"/>
<path d="M15.9901 25.082V20.2946L10.0679 16.8313L15.9901 25.082Z" fill="#8A92B2"/>
<path d="M16.0098 25.082V20.2946L21.932 16.8313L16.0098 25.082Z" fill="#62688F"/>
<path d="M15.9902 19.1045V12.9944L10 15.6767L15.9902 19.1045Z" fill="#62688F"/>
<path d="M16.0098 19.1045V12.9944L22 15.6767L16.0098 19.1045Z" fill="#454A75"/>
<path d="M10 15.6768L15.9902 6V12.9944L10 15.6768Z" fill="#8A92B2"/>
</svg>

================
File: public/logo.svg
================
<svg width="1000" height="1000" viewBox="0 0 1000 1000" fill="none" xmlns="http://www.w3.org/2000/svg">
<path d="M535 979.793C513.342 992.297 486.658 992.297 465 979.793L101.987 770.207C80.3292 757.703 66.9873 734.594 66.9873 709.586L66.9872 290.415C66.9872 265.406 80.3292 242.297 101.987 229.793L465 20.2073C486.658 7.70299 513.342 7.70298 535 20.2073L898.013 229.793C919.671 242.297 933.013 265.406 933.013 290.414L933.013 709.585C933.013 734.594 919.671 757.703 898.013 770.207L535 979.793Z" fill="black"/>
<path d="M476.921 401.463L324.561 315.521C324.561 315.521 286.285 300.359 320.944 282.299L468.968 200.693C468.968 200.693 489.183 183.35 519.506 200.693L669.711 283.017C669.711 283.017 704.37 296.024 665.375 316.239C626.381 336.454 515.888 397.845 515.888 397.845C515.888 397.845 497.375 413.007 476.894 401.463L476.921 401.463Z" fill="white"/>
<path d="M470.85 616.958L267.686 502.369C267.686 502.369 216.669 482.153 262.871 458.081L460.263 349.291C460.263 349.291 487.235 326.176 527.665 349.291L727.93 459.065C727.93 459.065 774.133 476.408 722.158 503.353C670.157 530.324 522.851 612.143 522.851 612.143C522.851 612.143 498.167 632.359 470.85 616.958Z" fill="white" fill-opacity="0.7"/>
<path d="M465.982 799.042L201.88 650.087C201.88 650.087 135.542 623.808 195.629 592.5L452.231 451.046C452.231 451.046 487.288 421.016 539.848 451.046L800.2 593.751C800.2 593.751 860.287 616.28 792.699 651.338C725.111 686.395 533.597 792.792 533.597 792.792C533.597 792.792 501.519 819.072 466.009 799.042L465.982 799.042Z" fill="white" fill-opacity="0.5"/>
</svg>

================
File: README.md
================
This is a [Next.js](https://nextjs.org/) project bootstrapped with [`create-next-app`](https://github.com/vercel/next.js/tree/canary/packages/create-next-app).

## Getting Started

First, run the development server:

```bash
npm run dev
# or
yarn dev
# or
pnpm dev
# or
bun dev
```

Open [http://localhost:3000](http://localhost:3000) with your browser to see the result.

You can start editing the page by modifying `pages/index.tsx`. The page auto-updates as you edit the file.

[API routes](https://nextjs.org/docs/api-routes/introduction) can be accessed on [http://localhost:3000/api/hello](http://localhost:3000/api/hello). This endpoint can be edited in `pages/api/hello.ts`.

The `pages/api` directory is mapped to `/api/*`. Files in this directory are treated as [API routes](https://nextjs.org/docs/api-routes/introduction) instead of React pages.

This project uses [`next/font`](https://nextjs.org/docs/basic-features/font-optimization) to automatically optimize and load Inter, a custom Google Font.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

You can check out [the Next.js GitHub repository](https://github.com/vercel/next.js/) - your feedback and contributions are welcome!

## Deploy on Vercel

The easiest way to deploy your Next.js app is to use the [Vercel Platform](https://vercel.com/new?utm_medium=default-template&filter=next.js&utm_source=create-next-app&utm_campaign=create-next-app-readme) from the creators of Next.js.

Check out our [Next.js deployment documentation](https://nextjs.org/docs/deployment) for more details.

================
File: styles/globals.css
================
@tailwind base;
@tailwind components;
@tailwind utilities;

/* You can add any global styles here */
body {
  @apply bg-dark-blue text-white;
}

.custom-class {
  border: 5px solid red;
}

================
File: tailwind.config.js
================
module.exports = {
  content: [
    "./pages/**/*.{js,ts,jsx,tsx}",
    "./components/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {
      colors: {
        'dark-blue': '#1A202C',
        'light-blue': '#2D3748',
        'accent-green': '#48BB78',
      },
    },
  },
  plugins: [],
}

================
File: tailwind.config.ts
================
import type { Config } from "tailwindcss";

const config: Config = {
  content: [
    "./pages/**/*.{js,ts,jsx,tsx}",
    "./components/**/*.{js,ts,jsx,tsx}",
    "./app/**/*.{js,ts,jsx,tsx,mdx}",
  ],
  theme: {
    extend: {
      colors: {
        'dark-blue': '#1A202C',
        'light-blue': '#2D3748',
        'accent-green': '#48BB78',
      },
    },
  },
  plugins: [],
};
export default config;

================
File: tsconfig.json
================
{
  "compilerOptions": {
    "target": "es5",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": true,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "incremental": true
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx"],
  "exclude": ["node_modules"]
}
